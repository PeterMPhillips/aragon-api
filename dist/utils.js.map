{"version":3,"sources":["../src/utils.js"],"names":["debug","params","process","env","NODE_ENV","console","getIconBySize","icons","size","sizes","map","icon","i","width","parseInt","split","isNaN","filter","sort","a","b","length","iconIndex","find","iconSize"],"mappings":";;;;;;;;AAAO,SAASA,KAAT,CAAgB,GAAGC,MAAnB,EAA2B;AAChC,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCC,IAAAA,OAAO,CAACL,KAAR,CAAc,GAAGC,MAAjB;AACD;AACF,C,CAED;AACA;;;AACO,SAASK,aAAT,CAAwBC,KAAxB,EAA+BC,IAAI,GAAG,CAAC,CAAvC,EAA0C;AAC/C;AACA,QAAMC,KAAK,GAAGF,KAAK,CAChBG,GADW,CACP,CAACC,IAAD,EAAOC,CAAP,KAAa;AAChB,UAAMC,KAAK,GAAGC,QAAQ,CAACH,IAAI,CAACF,KAAL,CAAWM,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAD,EAA2B,EAA3B,CAAtB;AACA,WAAO,CAACH,CAAD,EAAII,KAAK,CAACH,KAAD,CAAL,GAAe,CAAC,CAAhB,GAAoBA,KAAxB,CAAP;AACD,GAJW,EAKXI,MALW,CAKJT,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,CAAC,CALjB,EAMXU,IANW,CAMN,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CANZ,CAAd,CAF+C,CAU/C;;AACA,MAAIX,KAAK,CAACY,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAO,IAAP;AACD,GAb8C,CAe/C;;;AACA,MAAIb,IAAI,KAAK,CAAC,CAAd,EAAiB;AACf,WAAOD,KAAK,CAACE,KAAK,CAACA,KAAK,CAACY,MAAN,GAAe,CAAhB,CAAL,CAAwB,CAAxB,CAAD,CAAZ;AACD,GAlB8C,CAoB/C;AACA;;;AACA,QAAMC,SAAS,GAAG,CAACb,KAAK,CAACc,IAAN,CAAWC,QAAQ,IAAIA,QAAQ,CAAC,CAAD,CAAR,IAAehB,IAAtC,KACjBC,KAAK,CAACA,KAAK,CAACY,MAAN,GAAe,CAAhB,CADW,EACS,CADT,CAAlB;AAEA,SAAOd,KAAK,CAACe,SAAD,CAAZ;AACD","sourcesContent":["export function debug (...params) {\n  if (process.env.NODE_ENV !== 'production') {\n    console.debug(...params)\n  }\n}\n\n// Get the best icon for the given size.\n// Set size to -1 to get the largest one, or to 0 to get the smallest one.\nexport function getIconBySize (icons, size = -1) {\n  // Collect the sizes and sort them\n  const sizes = icons\n    .map((icon, i) => {\n      const width = parseInt(icon.sizes.split('x')[1], 10)\n      return [i, isNaN(width) ? -1 : width]\n    })\n    .filter(size => size[1] !== -1)\n    .sort((a, b) => a[1] - b[1])\n\n  // No valid size found\n  if (sizes.length === 0) {\n    return null\n  }\n\n  // No rendering size provided: return the largest icon.\n  if (size === -1) {\n    return icons[sizes[sizes.length - 1][0]]\n  }\n\n  // Find the first icon that is equal or larger than the provided size,\n  // or the largest one otherwise.\n  const iconIndex = (sizes.find(iconSize => iconSize[1] >= size) ||\n    sizes[sizes.length - 1])[0]\n  return icons[iconIndex]\n}\n"],"file":"utils.js"}